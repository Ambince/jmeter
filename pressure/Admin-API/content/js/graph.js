/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7913.0, "minX": 0.0, "maxY": 15886.0, "series": [{"data": [[0.0, 7913.0], [0.1, 7917.0], [0.2, 7920.0], [0.3, 7920.0], [0.4, 7982.0], [0.5, 8054.0], [0.6, 8076.0], [0.7, 8116.0], [0.8, 8124.0], [0.9, 8167.0], [1.0, 8171.0], [1.1, 8179.0], [1.2, 8190.0], [1.3, 8217.0], [1.4, 8217.0], [1.5, 8229.0], [1.6, 8240.0], [1.7, 8244.0], [1.8, 8245.0], [1.9, 8246.0], [2.0, 8368.0], [2.1, 8501.0], [2.2, 8606.0], [2.3, 8624.0], [2.4, 8671.0], [2.5, 9011.0], [2.6, 9132.0], [2.7, 9133.0], [2.8, 9136.0], [2.9, 9216.0], [3.0, 9321.0], [3.1, 9383.0], [3.2, 9452.0], [3.3, 9456.0], [3.4, 9470.0], [3.5, 9487.0], [3.6, 9506.0], [3.7, 9530.0], [3.8, 9555.0], [3.9, 9596.0], [4.0, 9630.0], [4.1, 9639.0], [4.2, 9652.0], [4.3, 9679.0], [4.4, 9726.0], [4.5, 9832.0], [4.6, 9865.0], [4.7, 9918.0], [4.8, 9973.0], [4.9, 10026.0], [5.0, 10029.0], [5.1, 10138.0], [5.2, 10171.0], [5.3, 10209.0], [5.4, 10316.0], [5.5, 10434.0], [5.6, 10606.0], [5.7, 10613.0], [5.8, 10754.0], [5.9, 10807.0], [6.0, 10972.0], [6.1, 11335.0], [6.2, 11381.0], [6.3, 11403.0], [6.4, 11406.0], [6.5, 11482.0], [6.6, 11529.0], [6.7, 11532.0], [6.8, 11552.0], [6.9, 11570.0], [7.0, 11573.0], [7.1, 11643.0], [7.2, 11656.0], [7.3, 11682.0], [7.4, 11684.0], [7.5, 11713.0], [7.6, 11721.0], [7.7, 11731.0], [7.8, 11794.0], [7.9, 11807.0], [8.0, 11817.0], [8.1, 11822.0], [8.2, 11842.0], [8.3, 11844.0], [8.4, 11846.0], [8.5, 11847.0], [8.6, 11847.0], [8.7, 11886.0], [8.8, 11892.0], [8.9, 11900.0], [9.0, 11945.0], [9.1, 11964.0], [9.2, 11970.0], [9.3, 11998.0], [9.4, 12000.0], [9.5, 12000.0], [9.6, 12001.0], [9.7, 12008.0], [9.8, 12014.0], [9.9, 12021.0], [10.0, 12025.0], [10.1, 12036.0], [10.2, 12039.0], [10.3, 12058.0], [10.4, 12067.0], [10.5, 12092.0], [10.6, 12097.0], [10.7, 12100.0], [10.8, 12106.0], [10.9, 12114.0], [11.0, 12116.0], [11.1, 12117.0], [11.2, 12149.0], [11.3, 12155.0], [11.4, 12163.0], [11.5, 12164.0], [11.6, 12165.0], [11.7, 12186.0], [11.8, 12187.0], [11.9, 12192.0], [12.0, 12193.0], [12.1, 12194.0], [12.2, 12195.0], [12.3, 12201.0], [12.4, 12204.0], [12.5, 12207.0], [12.6, 12207.0], [12.7, 12208.0], [12.8, 12216.0], [12.9, 12223.0], [13.0, 12227.0], [13.1, 12233.0], [13.2, 12241.0], [13.3, 12247.0], [13.4, 12248.0], [13.5, 12254.0], [13.6, 12256.0], [13.7, 12257.0], [13.8, 12263.0], [13.9, 12269.0], [14.0, 12273.0], [14.1, 12286.0], [14.2, 12296.0], [14.3, 12306.0], [14.4, 12342.0], [14.5, 12356.0], [14.6, 12365.0], [14.7, 12369.0], [14.8, 12390.0], [14.9, 12397.0], [15.0, 12400.0], [15.1, 12416.0], [15.2, 12422.0], [15.3, 12439.0], [15.4, 12439.0], [15.5, 12440.0], [15.6, 12441.0], [15.7, 12467.0], [15.8, 12470.0], [15.9, 12477.0], [16.0, 12478.0], [16.1, 12488.0], [16.2, 12498.0], [16.3, 12504.0], [16.4, 12508.0], [16.5, 12511.0], [16.6, 12518.0], [16.7, 12523.0], [16.8, 12542.0], [16.9, 12555.0], [17.0, 12555.0], [17.1, 12569.0], [17.2, 12570.0], [17.3, 12571.0], [17.4, 12590.0], [17.5, 12593.0], [17.6, 12597.0], [17.7, 12602.0], [17.8, 12602.0], [17.9, 12607.0], [18.0, 12608.0], [18.1, 12609.0], [18.2, 12615.0], [18.3, 12624.0], [18.4, 12659.0], [18.5, 12661.0], [18.6, 12665.0], [18.7, 12675.0], [18.8, 12692.0], [18.9, 12693.0], [19.0, 12704.0], [19.1, 12736.0], [19.2, 12747.0], [19.3, 12756.0], [19.4, 12773.0], [19.5, 12774.0], [19.6, 12780.0], [19.7, 12780.0], [19.8, 12783.0], [19.9, 12794.0], [20.0, 12796.0], [20.1, 12796.0], [20.2, 12807.0], [20.3, 12815.0], [20.4, 12823.0], [20.5, 12852.0], [20.6, 12855.0], [20.7, 12876.0], [20.8, 12903.0], [20.9, 12908.0], [21.0, 12942.0], [21.1, 12958.0], [21.2, 12961.0], [21.3, 12987.0], [21.4, 12987.0], [21.5, 12987.0], [21.6, 12991.0], [21.7, 12991.0], [21.8, 12995.0], [21.9, 13011.0], [22.0, 13019.0], [22.1, 13024.0], [22.2, 13045.0], [22.3, 13051.0], [22.4, 13057.0], [22.5, 13062.0], [22.6, 13065.0], [22.7, 13067.0], [22.8, 13068.0], [22.9, 13076.0], [23.0, 13081.0], [23.1, 13082.0], [23.2, 13084.0], [23.3, 13087.0], [23.4, 13091.0], [23.5, 13092.0], [23.6, 13094.0], [23.7, 13106.0], [23.8, 13107.0], [23.9, 13112.0], [24.0, 13115.0], [24.1, 13115.0], [24.2, 13116.0], [24.3, 13125.0], [24.4, 13130.0], [24.5, 13139.0], [24.6, 13141.0], [24.7, 13143.0], [24.8, 13144.0], [24.9, 13155.0], [25.0, 13162.0], [25.1, 13185.0], [25.2, 13192.0], [25.3, 13193.0], [25.4, 13203.0], [25.5, 13204.0], [25.6, 13206.0], [25.7, 13216.0], [25.8, 13220.0], [25.9, 13223.0], [26.0, 13224.0], [26.1, 13238.0], [26.2, 13245.0], [26.3, 13245.0], [26.4, 13246.0], [26.5, 13252.0], [26.6, 13253.0], [26.7, 13260.0], [26.8, 13260.0], [26.9, 13266.0], [27.0, 13267.0], [27.1, 13271.0], [27.2, 13284.0], [27.3, 13291.0], [27.4, 13298.0], [27.5, 13299.0], [27.6, 13303.0], [27.7, 13303.0], [27.8, 13303.0], [27.9, 13303.0], [28.0, 13304.0], [28.1, 13310.0], [28.2, 13311.0], [28.3, 13314.0], [28.4, 13315.0], [28.5, 13316.0], [28.6, 13317.0], [28.7, 13318.0], [28.8, 13318.0], [28.9, 13323.0], [29.0, 13326.0], [29.1, 13337.0], [29.2, 13338.0], [29.3, 13341.0], [29.4, 13344.0], [29.5, 13347.0], [29.6, 13351.0], [29.7, 13355.0], [29.8, 13358.0], [29.9, 13358.0], [30.0, 13358.0], [30.1, 13359.0], [30.2, 13360.0], [30.3, 13362.0], [30.4, 13366.0], [30.5, 13367.0], [30.6, 13382.0], [30.7, 13384.0], [30.8, 13387.0], [30.9, 13407.0], [31.0, 13409.0], [31.1, 13409.0], [31.2, 13423.0], [31.3, 13427.0], [31.4, 13429.0], [31.5, 13432.0], [31.6, 13434.0], [31.7, 13444.0], [31.8, 13449.0], [31.9, 13456.0], [32.0, 13458.0], [32.1, 13460.0], [32.2, 13464.0], [32.3, 13467.0], [32.4, 13468.0], [32.5, 13477.0], [32.6, 13482.0], [32.7, 13485.0], [32.8, 13489.0], [32.9, 13502.0], [33.0, 13505.0], [33.1, 13509.0], [33.2, 13510.0], [33.3, 13511.0], [33.4, 13516.0], [33.5, 13517.0], [33.6, 13532.0], [33.7, 13534.0], [33.8, 13537.0], [33.9, 13542.0], [34.0, 13547.0], [34.1, 13550.0], [34.2, 13557.0], [34.3, 13562.0], [34.4, 13562.0], [34.5, 13566.0], [34.6, 13566.0], [34.7, 13588.0], [34.8, 13597.0], [34.9, 13602.0], [35.0, 13606.0], [35.1, 13614.0], [35.2, 13614.0], [35.3, 13622.0], [35.4, 13622.0], [35.5, 13633.0], [35.6, 13633.0], [35.7, 13634.0], [35.8, 13634.0], [35.9, 13639.0], [36.0, 13642.0], [36.1, 13643.0], [36.2, 13654.0], [36.3, 13657.0], [36.4, 13658.0], [36.5, 13662.0], [36.6, 13667.0], [36.7, 13668.0], [36.8, 13676.0], [36.9, 13676.0], [37.0, 13676.0], [37.1, 13681.0], [37.2, 13681.0], [37.3, 13682.0], [37.4, 13685.0], [37.5, 13686.0], [37.6, 13691.0], [37.7, 13694.0], [37.8, 13703.0], [37.9, 13704.0], [38.0, 13707.0], [38.1, 13713.0], [38.2, 13714.0], [38.3, 13715.0], [38.4, 13717.0], [38.5, 13717.0], [38.6, 13735.0], [38.7, 13736.0], [38.8, 13739.0], [38.9, 13742.0], [39.0, 13746.0], [39.1, 13748.0], [39.2, 13748.0], [39.3, 13749.0], [39.4, 13754.0], [39.5, 13760.0], [39.6, 13763.0], [39.7, 13766.0], [39.8, 13777.0], [39.9, 13782.0], [40.0, 13787.0], [40.1, 13790.0], [40.2, 13793.0], [40.3, 13795.0], [40.4, 13795.0], [40.5, 13804.0], [40.6, 13807.0], [40.7, 13815.0], [40.8, 13817.0], [40.9, 13818.0], [41.0, 13824.0], [41.1, 13834.0], [41.2, 13840.0], [41.3, 13848.0], [41.4, 13849.0], [41.5, 13860.0], [41.6, 13863.0], [41.7, 13865.0], [41.8, 13869.0], [41.9, 13870.0], [42.0, 13879.0], [42.1, 13883.0], [42.2, 13886.0], [42.3, 13899.0], [42.4, 13901.0], [42.5, 13901.0], [42.6, 13908.0], [42.7, 13915.0], [42.8, 13915.0], [42.9, 13925.0], [43.0, 13925.0], [43.1, 13930.0], [43.2, 13931.0], [43.3, 13932.0], [43.4, 13939.0], [43.5, 13967.0], [43.6, 13973.0], [43.7, 13977.0], [43.8, 13978.0], [43.9, 13985.0], [44.0, 13987.0], [44.1, 13989.0], [44.2, 13989.0], [44.3, 13994.0], [44.4, 13995.0], [44.5, 13997.0], [44.6, 13998.0], [44.7, 14000.0], [44.8, 14005.0], [44.9, 14005.0], [45.0, 14009.0], [45.1, 14018.0], [45.2, 14020.0], [45.3, 14020.0], [45.4, 14021.0], [45.5, 14027.0], [45.6, 14029.0], [45.7, 14036.0], [45.8, 14042.0], [45.9, 14044.0], [46.0, 14046.0], [46.1, 14054.0], [46.2, 14063.0], [46.3, 14074.0], [46.4, 14075.0], [46.5, 14082.0], [46.6, 14101.0], [46.7, 14101.0], [46.8, 14101.0], [46.9, 14103.0], [47.0, 14107.0], [47.1, 14113.0], [47.2, 14116.0], [47.3, 14121.0], [47.4, 14122.0], [47.5, 14128.0], [47.6, 14173.0], [47.7, 14179.0], [47.8, 14183.0], [47.9, 14189.0], [48.0, 14196.0], [48.1, 14202.0], [48.2, 14212.0], [48.3, 14223.0], [48.4, 14236.0], [48.5, 14249.0], [48.6, 14258.0], [48.7, 14261.0], [48.8, 14262.0], [48.9, 14266.0], [49.0, 14270.0], [49.1, 14277.0], [49.2, 14278.0], [49.3, 14280.0], [49.4, 14285.0], [49.5, 14294.0], [49.6, 14303.0], [49.7, 14311.0], [49.8, 14319.0], [49.9, 14328.0], [50.0, 14329.0], [50.1, 14331.0], [50.2, 14336.0], [50.3, 14337.0], [50.4, 14353.0], [50.5, 14354.0], [50.6, 14356.0], [50.7, 14357.0], [50.8, 14359.0], [50.9, 14378.0], [51.0, 14397.0], [51.1, 14402.0], [51.2, 14410.0], [51.3, 14410.0], [51.4, 14412.0], [51.5, 14415.0], [51.6, 14419.0], [51.7, 14420.0], [51.8, 14422.0], [51.9, 14427.0], [52.0, 14430.0], [52.1, 14435.0], [52.2, 14443.0], [52.3, 14464.0], [52.4, 14465.0], [52.5, 14469.0], [52.6, 14477.0], [52.7, 14480.0], [52.8, 14484.0], [52.9, 14487.0], [53.0, 14489.0], [53.1, 14489.0], [53.2, 14491.0], [53.3, 14491.0], [53.4, 14495.0], [53.5, 14499.0], [53.6, 14502.0], [53.7, 14519.0], [53.8, 14532.0], [53.9, 14539.0], [54.0, 14541.0], [54.1, 14542.0], [54.2, 14545.0], [54.3, 14546.0], [54.4, 14555.0], [54.5, 14556.0], [54.6, 14561.0], [54.7, 14572.0], [54.8, 14574.0], [54.9, 14579.0], [55.0, 14580.0], [55.1, 14580.0], [55.2, 14580.0], [55.3, 14580.0], [55.4, 14585.0], [55.5, 14589.0], [55.6, 14598.0], [55.7, 14603.0], [55.8, 14603.0], [55.9, 14610.0], [56.0, 14611.0], [56.1, 14612.0], [56.2, 14629.0], [56.3, 14632.0], [56.4, 14635.0], [56.5, 14642.0], [56.6, 14649.0], [56.7, 14650.0], [56.8, 14651.0], [56.9, 14652.0], [57.0, 14653.0], [57.1, 14660.0], [57.2, 14667.0], [57.3, 14672.0], [57.4, 14678.0], [57.5, 14682.0], [57.6, 14684.0], [57.7, 14684.0], [57.8, 14685.0], [57.9, 14686.0], [58.0, 14705.0], [58.1, 14717.0], [58.2, 14727.0], [58.3, 14735.0], [58.4, 14736.0], [58.5, 14749.0], [58.6, 14752.0], [58.7, 14759.0], [58.8, 14774.0], [58.9, 14777.0], [59.0, 14783.0], [59.1, 14783.0], [59.2, 14783.0], [59.3, 14790.0], [59.4, 14790.0], [59.5, 14793.0], [59.6, 14793.0], [59.7, 14794.0], [59.8, 14797.0], [59.9, 14797.0], [60.0, 14799.0], [60.1, 14804.0], [60.2, 14805.0], [60.3, 14810.0], [60.4, 14811.0], [60.5, 14811.0], [60.6, 14814.0], [60.7, 14815.0], [60.8, 14815.0], [60.9, 14816.0], [61.0, 14830.0], [61.1, 14833.0], [61.2, 14834.0], [61.3, 14835.0], [61.4, 14836.0], [61.5, 14839.0], [61.6, 14854.0], [61.7, 14855.0], [61.8, 14855.0], [61.9, 14859.0], [62.0, 14863.0], [62.1, 14866.0], [62.2, 14867.0], [62.3, 14871.0], [62.4, 14871.0], [62.5, 14886.0], [62.6, 14893.0], [62.7, 14894.0], [62.8, 14896.0], [62.9, 14897.0], [63.0, 14900.0], [63.1, 14902.0], [63.2, 14902.0], [63.3, 14905.0], [63.4, 14906.0], [63.5, 14909.0], [63.6, 14911.0], [63.7, 14913.0], [63.8, 14916.0], [63.9, 14920.0], [64.0, 14929.0], [64.1, 14931.0], [64.2, 14935.0], [64.3, 14936.0], [64.4, 14937.0], [64.5, 14938.0], [64.6, 14939.0], [64.7, 14940.0], [64.8, 14941.0], [64.9, 14947.0], [65.0, 14947.0], [65.1, 14948.0], [65.2, 14951.0], [65.3, 14953.0], [65.4, 14957.0], [65.5, 14958.0], [65.6, 14962.0], [65.7, 14965.0], [65.8, 14966.0], [65.9, 14970.0], [66.0, 14974.0], [66.1, 14974.0], [66.2, 14975.0], [66.3, 14975.0], [66.4, 14976.0], [66.5, 14977.0], [66.6, 14982.0], [66.7, 14985.0], [66.8, 14988.0], [66.9, 14988.0], [67.0, 14989.0], [67.1, 14989.0], [67.2, 14991.0], [67.3, 14994.0], [67.4, 14998.0], [67.5, 14998.0], [67.6, 15000.0], [67.7, 15004.0], [67.8, 15016.0], [67.9, 15024.0], [68.0, 15024.0], [68.1, 15025.0], [68.2, 15033.0], [68.3, 15035.0], [68.4, 15035.0], [68.5, 15035.0], [68.6, 15039.0], [68.7, 15039.0], [68.8, 15040.0], [68.9, 15040.0], [69.0, 15041.0], [69.1, 15043.0], [69.2, 15044.0], [69.3, 15049.0], [69.4, 15053.0], [69.5, 15057.0], [69.6, 15058.0], [69.7, 15063.0], [69.8, 15066.0], [69.9, 15067.0], [70.0, 15085.0], [70.1, 15088.0], [70.2, 15092.0], [70.3, 15097.0], [70.4, 15097.0], [70.5, 15098.0], [70.6, 15100.0], [70.7, 15105.0], [70.8, 15107.0], [70.9, 15108.0], [71.0, 15108.0], [71.1, 15111.0], [71.2, 15114.0], [71.3, 15115.0], [71.4, 15117.0], [71.5, 15117.0], [71.6, 15118.0], [71.7, 15118.0], [71.8, 15125.0], [71.9, 15126.0], [72.0, 15128.0], [72.1, 15128.0], [72.2, 15132.0], [72.3, 15135.0], [72.4, 15137.0], [72.5, 15139.0], [72.6, 15139.0], [72.7, 15141.0], [72.8, 15141.0], [72.9, 15142.0], [73.0, 15145.0], [73.1, 15145.0], [73.2, 15146.0], [73.3, 15148.0], [73.4, 15154.0], [73.5, 15158.0], [73.6, 15159.0], [73.7, 15159.0], [73.8, 15164.0], [73.9, 15165.0], [74.0, 15172.0], [74.1, 15173.0], [74.2, 15176.0], [74.3, 15176.0], [74.4, 15177.0], [74.5, 15177.0], [74.6, 15179.0], [74.7, 15180.0], [74.8, 15181.0], [74.9, 15182.0], [75.0, 15186.0], [75.1, 15188.0], [75.2, 15190.0], [75.3, 15192.0], [75.4, 15194.0], [75.5, 15194.0], [75.6, 15196.0], [75.7, 15196.0], [75.8, 15197.0], [75.9, 15203.0], [76.0, 15208.0], [76.1, 15214.0], [76.2, 15215.0], [76.3, 15217.0], [76.4, 15219.0], [76.5, 15219.0], [76.6, 15222.0], [76.7, 15224.0], [76.8, 15226.0], [76.9, 15231.0], [77.0, 15231.0], [77.1, 15235.0], [77.2, 15237.0], [77.3, 15238.0], [77.4, 15238.0], [77.5, 15244.0], [77.6, 15248.0], [77.7, 15249.0], [77.8, 15253.0], [77.9, 15254.0], [78.0, 15256.0], [78.1, 15263.0], [78.2, 15265.0], [78.3, 15266.0], [78.4, 15271.0], [78.5, 15271.0], [78.6, 15271.0], [78.7, 15276.0], [78.8, 15276.0], [78.9, 15277.0], [79.0, 15279.0], [79.1, 15281.0], [79.2, 15281.0], [79.3, 15283.0], [79.4, 15284.0], [79.5, 15284.0], [79.6, 15285.0], [79.7, 15286.0], [79.8, 15290.0], [79.9, 15292.0], [80.0, 15293.0], [80.1, 15293.0], [80.2, 15293.0], [80.3, 15293.0], [80.4, 15296.0], [80.5, 15298.0], [80.6, 15299.0], [80.7, 15300.0], [80.8, 15304.0], [80.9, 15306.0], [81.0, 15307.0], [81.1, 15308.0], [81.2, 15308.0], [81.3, 15308.0], [81.4, 15310.0], [81.5, 15312.0], [81.6, 15312.0], [81.7, 15314.0], [81.8, 15314.0], [81.9, 15315.0], [82.0, 15323.0], [82.1, 15324.0], [82.2, 15325.0], [82.3, 15325.0], [82.4, 15326.0], [82.5, 15327.0], [82.6, 15329.0], [82.7, 15329.0], [82.8, 15335.0], [82.9, 15336.0], [83.0, 15336.0], [83.1, 15336.0], [83.2, 15340.0], [83.3, 15340.0], [83.4, 15344.0], [83.5, 15344.0], [83.6, 15344.0], [83.7, 15353.0], [83.8, 15354.0], [83.9, 15355.0], [84.0, 15356.0], [84.1, 15358.0], [84.2, 15362.0], [84.3, 15362.0], [84.4, 15366.0], [84.5, 15367.0], [84.6, 15368.0], [84.7, 15368.0], [84.8, 15369.0], [84.9, 15370.0], [85.0, 15372.0], [85.1, 15373.0], [85.2, 15374.0], [85.3, 15376.0], [85.4, 15377.0], [85.5, 15378.0], [85.6, 15380.0], [85.7, 15380.0], [85.8, 15382.0], [85.9, 15382.0], [86.0, 15383.0], [86.1, 15384.0], [86.2, 15384.0], [86.3, 15384.0], [86.4, 15385.0], [86.5, 15385.0], [86.6, 15385.0], [86.7, 15385.0], [86.8, 15386.0], [86.9, 15386.0], [87.0, 15386.0], [87.1, 15387.0], [87.2, 15388.0], [87.3, 15389.0], [87.4, 15391.0], [87.5, 15396.0], [87.6, 15396.0], [87.7, 15396.0], [87.8, 15399.0], [87.9, 15403.0], [88.0, 15404.0], [88.1, 15406.0], [88.2, 15406.0], [88.3, 15409.0], [88.4, 15411.0], [88.5, 15415.0], [88.6, 15416.0], [88.7, 15417.0], [88.8, 15417.0], [88.9, 15418.0], [89.0, 15419.0], [89.1, 15420.0], [89.2, 15424.0], [89.3, 15425.0], [89.4, 15425.0], [89.5, 15428.0], [89.6, 15428.0], [89.7, 15429.0], [89.8, 15430.0], [89.9, 15434.0], [90.0, 15435.0], [90.1, 15435.0], [90.2, 15436.0], [90.3, 15436.0], [90.4, 15437.0], [90.5, 15440.0], [90.6, 15440.0], [90.7, 15443.0], [90.8, 15443.0], [90.9, 15447.0], [91.0, 15448.0], [91.1, 15449.0], [91.2, 15450.0], [91.3, 15453.0], [91.4, 15454.0], [91.5, 15457.0], [91.6, 15459.0], [91.7, 15460.0], [91.8, 15462.0], [91.9, 15466.0], [92.0, 15470.0], [92.1, 15471.0], [92.2, 15474.0], [92.3, 15476.0], [92.4, 15477.0], [92.5, 15479.0], [92.6, 15479.0], [92.7, 15480.0], [92.8, 15480.0], [92.9, 15482.0], [93.0, 15484.0], [93.1, 15486.0], [93.2, 15488.0], [93.3, 15490.0], [93.4, 15491.0], [93.5, 15492.0], [93.6, 15503.0], [93.7, 15505.0], [93.8, 15506.0], [93.9, 15507.0], [94.0, 15509.0], [94.1, 15511.0], [94.2, 15518.0], [94.3, 15531.0], [94.4, 15537.0], [94.5, 15539.0], [94.6, 15540.0], [94.7, 15549.0], [94.8, 15550.0], [94.9, 15554.0], [95.0, 15554.0], [95.1, 15555.0], [95.2, 15555.0], [95.3, 15558.0], [95.4, 15560.0], [95.5, 15561.0], [95.6, 15562.0], [95.7, 15565.0], [95.8, 15569.0], [95.9, 15570.0], [96.0, 15587.0], [96.1, 15593.0], [96.2, 15595.0], [96.3, 15596.0], [96.4, 15596.0], [96.5, 15597.0], [96.6, 15603.0], [96.7, 15605.0], [96.8, 15607.0], [96.9, 15608.0], [97.0, 15612.0], [97.1, 15620.0], [97.2, 15620.0], [97.3, 15622.0], [97.4, 15625.0], [97.5, 15630.0], [97.6, 15647.0], [97.7, 15676.0], [97.8, 15681.0], [97.9, 15683.0], [98.0, 15689.0], [98.1, 15689.0], [98.2, 15695.0], [98.3, 15701.0], [98.4, 15702.0], [98.5, 15704.0], [98.6, 15707.0], [98.7, 15709.0], [98.8, 15712.0], [98.9, 15720.0], [99.0, 15724.0], [99.1, 15733.0], [99.2, 15748.0], [99.3, 15751.0], [99.4, 15763.0], [99.5, 15775.0], [99.6, 15805.0], [99.7, 15812.0], [99.8, 15856.0], [99.9, 15886.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 7900.0, "maxY": 73.0, "series": [{"data": [[7900.0, 5.0], [8100.0, 6.0], [8000.0, 2.0], [8200.0, 6.0], [8300.0, 1.0], [8500.0, 1.0], [8600.0, 3.0], [9100.0, 3.0], [9000.0, 1.0], [9200.0, 1.0], [9300.0, 2.0], [9400.0, 4.0], [9500.0, 4.0], [9600.0, 5.0], [9700.0, 1.0], [9800.0, 2.0], [9900.0, 2.0], [10000.0, 2.0], [10100.0, 2.0], [10200.0, 1.0], [10300.0, 1.0], [10600.0, 2.0], [10400.0, 1.0], [10700.0, 1.0], [10800.0, 1.0], [10900.0, 1.0], [11300.0, 2.0], [11500.0, 5.0], [11400.0, 3.0], [11700.0, 4.0], [11600.0, 4.0], [11800.0, 10.0], [11900.0, 5.0], [12000.0, 13.0], [12100.0, 16.0], [12200.0, 20.0], [12400.0, 13.0], [12500.0, 14.0], [12300.0, 7.0], [12600.0, 13.0], [12700.0, 11.0], [12800.0, 6.0], [12900.0, 11.0], [13100.0, 17.0], [13000.0, 18.0], [13200.0, 22.0], [13300.0, 33.0], [13400.0, 20.0], [13500.0, 20.0], [13600.0, 29.0], [13700.0, 27.0], [13800.0, 19.0], [13900.0, 23.0], [14000.0, 19.0], [14100.0, 15.0], [14200.0, 15.0], [14300.0, 15.0], [14400.0, 25.0], [14500.0, 21.0], [14600.0, 23.0], [14700.0, 21.0], [14800.0, 29.0], [14900.0, 46.0], [15000.0, 30.0], [15100.0, 53.0], [15300.0, 73.0], [15200.0, 48.0], [15400.0, 57.0], [15500.0, 30.0], [15600.0, 17.0], [15700.0, 13.0], [15800.0, 4.0]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 524.268, "minX": 1.65373044E12, "maxY": 524.268, "series": [{"data": [[1.65373044E12, 524.268]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65373044E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7913.0, "minX": 1.0, "maxY": 15886.0, "series": [{"data": [[2.0, 15805.0], [3.0, 15886.0], [4.0, 15607.0], [5.0, 15812.0], [6.0, 15751.0], [7.0, 15385.0], [8.0, 15695.0], [9.0, 15415.0], [10.0, 15596.0], [11.0, 15763.0], [13.0, 15493.0], [14.0, 15720.0], [15.0, 15775.0], [16.0, 15368.0], [17.0, 15430.0], [18.0, 15550.0], [19.0, 15471.0], [21.0, 15522.5], [22.0, 15709.0], [23.0, 15484.0], [24.0, 15701.0], [25.0, 15733.0], [26.0, 15440.0], [27.0, 15622.0], [28.0, 15748.0], [29.0, 15336.0], [30.0, 15712.0], [31.0, 15391.0], [33.0, 15689.0], [32.0, 15724.0], [35.0, 15443.0], [34.0, 15704.0], [37.0, 15511.0], [36.0, 15689.0], [39.0, 15595.0], [38.0, 15630.0], [41.0, 15569.0], [40.0, 15555.0], [43.0, 15555.0], [42.0, 15384.0], [45.0, 15386.0], [44.0, 15681.0], [47.0, 15702.0], [46.0, 15470.0], [49.0, 15537.0], [48.0, 15492.0], [51.0, 15707.0], [50.0, 15406.0], [53.0, 15411.0], [52.0, 15605.0], [55.0, 15676.0], [54.0, 15436.0], [57.0, 15336.0], [56.0, 15608.0], [59.0, 15597.0], [58.0, 15404.0], [61.0, 15683.0], [60.0, 15435.0], [63.0, 15509.0], [62.0, 15596.0], [67.0, 15612.0], [66.0, 15286.0], [65.0, 15448.0], [64.0, 15306.0], [71.0, 15593.0], [70.0, 15587.0], [69.0, 15505.0], [68.0, 15340.0], [75.0, 15362.0], [74.0, 15358.0], [73.0, 15385.0], [72.0, 15479.0], [79.0, 15565.0], [78.0, 15298.0], [77.0, 15417.0], [76.0, 15647.0], [98.0, 15562.0], [102.0, 15490.0], [100.0, 15373.0], [116.0, 15549.0], [122.0, 15531.0], [127.0, 15570.0], [125.0, 15620.0], [124.0, 15625.0], [135.0, 15554.0], [146.0, 15362.0], [145.0, 15447.0], [158.0, 15603.0], [156.0, 15560.0], [170.0, 15539.0], [183.0, 15429.0], [185.0, 15554.0], [206.0, 15561.0], [239.0, 15389.0], [247.0, 15176.0], [245.0, 15293.0], [243.0, 15558.0], [255.0, 15488.0], [253.0, 15385.0], [252.0, 15310.0], [270.0, 15248.0], [271.0, 15196.0], [269.0, 15474.0], [268.0, 15173.0], [267.0, 15503.0], [266.0, 15203.0], [265.0, 15376.0], [264.0, 15454.0], [263.0, 15406.0], [259.0, 15540.0], [256.0, 15419.0], [262.0, 15276.0], [286.0, 15466.0], [287.0, 15386.0], [285.0, 15180.5], [275.0, 15388.0], [273.0, 15462.0], [272.0, 15231.0], [283.0, 15128.0], [282.0, 15182.0], [281.0, 15482.0], [280.0, 15181.0], [279.0, 15281.0], [276.0, 15479.0], [302.0, 15340.0], [303.0, 15097.0], [301.0, 15284.0], [300.0, 15293.0], [299.0, 15486.0], [298.0, 15126.0], [297.0, 15226.0], [296.0, 15350.0], [295.0, 15355.0], [290.0, 15459.0], [289.0, 15401.0], [294.0, 15266.0], [293.0, 15292.0], [292.0, 15195.5], [318.0, 15159.0], [319.0, 15180.0], [317.0, 14988.0], [316.0, 14863.0], [315.0, 15085.0], [314.0, 14897.0], [313.0, 15141.0], [308.0, 15192.718750000004], [305.0, 15421.0], [307.0, 15275.368000000002], [306.0, 15491.0], [323.0, 15141.0], [334.0, 15174.0], [332.0, 15114.0], [329.0, 14974.0], [328.0, 15181.0], [327.0, 15035.0], [326.0, 14975.0], [325.0, 14975.0], [324.0, 15145.0], [322.0, 14982.0], [321.0, 14977.0], [350.0, 14811.0], [351.0, 15066.0], [349.0, 15139.0], [348.0, 14929.0], [347.0, 14902.0], [346.0, 14871.0], [345.0, 14916.0], [344.0, 15067.0], [343.0, 14948.0], [337.0, 14774.0], [336.0, 14894.0], [339.0, 14867.0], [338.0, 14935.0], [342.0, 14833.0], [341.0, 15039.0], [340.0, 14866.0], [366.0, 15088.0], [367.0, 14797.0], [365.0, 14686.0], [364.0, 15043.0], [363.0, 15039.0], [362.0, 15088.0], [360.0, 14900.0], [359.0, 15033.0], [352.0, 15128.0], [354.0, 15125.0], [353.0, 15053.0], [382.0, 14985.0], [383.0, 14897.9375], [381.0, 14783.0], [380.0, 14653.0], [379.0, 15063.0], [378.0, 14911.0], [377.0, 14815.0], [376.0, 14736.0], [375.0, 14811.0], [371.0, 14834.0], [370.0, 14855.0], [369.0, 14735.0], [368.0, 14855.0], [373.0, 14896.5], [398.0, 14905.0], [399.0, 14966.0], [397.0, 14585.0], [396.0, 14953.0], [395.0, 14684.0], [394.0, 15000.0], [393.0, 14913.0], [392.0, 14797.0], [391.0, 14667.0], [385.0, 14994.0], [387.0, 14612.0], [386.0, 14937.0], [390.0, 14790.0], [389.0, 14629.0], [388.0, 15035.0], [413.0, 14940.0], [415.0, 14794.0], [412.0, 14854.0], [403.0, 14974.0], [402.0, 14814.0], [401.0, 14909.0], [400.0, 14835.0], [411.0, 14886.0], [410.0, 14936.0], [409.0, 14922.0], [407.0, 14896.0], [406.0, 14939.0], [405.0, 14947.0], [404.0, 14546.0], [429.0, 14697.5], [430.0, 14561.0], [428.0, 14871.0], [419.0, 14632.0], [418.0, 14652.0], [417.0, 14545.0], [416.0, 14790.0], [427.0, 14541.0], [426.0, 14580.0], [425.0, 14572.0], [424.0, 14902.0], [423.0, 14816.0], [422.0, 14752.0], [421.0, 14859.0], [420.0, 14705.0], [446.0, 14502.0], [447.0, 14556.0], [445.0, 14632.0], [435.0, 14539.0], [434.0, 14696.5], [432.0, 14820.0], [443.0, 14490.0], [441.0, 14603.0], [440.0, 14793.0], [439.0, 14484.0], [438.0, 14836.0], [437.0, 14793.0], [436.0, 14574.0], [462.0, 14749.0], [463.0, 14672.0], [461.0, 14336.0], [460.0, 14402.0], [459.0, 14717.0], [458.0, 14660.0], [457.0, 14589.0], [456.0, 14611.0], [455.0, 14489.0], [449.0, 14469.0], [448.0, 14783.0], [451.0, 14532.0], [450.0, 14727.0], [454.0, 14603.0], [453.0, 14427.0], [452.0, 14519.0], [478.0, 14319.0], [479.0, 14499.0], [477.0, 14337.0], [467.0, 14642.0], [466.0, 14491.0], [465.0, 14443.0], [464.0, 14580.0], [475.0, 14465.0], [474.0, 14650.0], [473.0, 14495.0], [472.0, 14430.0], [471.0, 14684.0], [470.0, 13782.0], [469.0, 14635.0], [468.0, 14649.0], [494.0, 14227.0], [495.0, 14183.0], [493.0, 14249.0], [492.0, 14542.0], [491.0, 14579.0], [490.0, 14598.0], [489.0, 14410.0], [488.0, 14356.0], [487.0, 14415.0], [481.0, 14261.0], [480.0, 14678.0], [483.0, 14422.0], [482.0, 14651.0], [486.0, 14378.0], [485.0, 14580.0], [484.0, 14555.0], [510.0, 14236.0], [511.0, 14202.0], [509.0, 14285.0], [508.0, 14359.0], [507.0, 14082.0], [506.0, 14397.0], [505.0, 14480.0], [504.0, 14419.0], [503.0, 14464.0], [497.0, 14435.0], [496.0, 14420.0], [499.0, 14270.0], [498.0, 14412.0], [502.0, 14477.0], [501.0, 14410.0], [500.0, 14357.0], [540.0, 14266.0], [543.0, 14000.0], [529.0, 14092.5], [528.0, 14311.0], [531.0, 13995.0], [530.0, 14303.0], [533.0, 13925.0], [532.0, 13973.0], [542.0, 13870.0], [541.0, 14018.0], [539.0, 13899.0], [538.0, 13997.0], [537.0, 14262.0], [536.0, 13967.0], [527.0, 14329.0], [513.0, 14354.0], [512.0, 14294.0], [515.0, 14278.0], [514.0, 14173.0], [517.0, 14101.0], [516.0, 14331.0], [519.0, 14328.0], [518.0, 14258.0], [526.0, 14204.0], [524.0, 14196.0], [522.0, 14121.0], [521.0, 14054.0], [520.0, 14046.0], [535.0, 14212.0], [534.0, 13977.0], [569.0, 14027.0], [574.0, 14071.5], [575.0, 13739.0], [561.0, 14075.0], [563.0, 14044.0], [562.0, 13804.0], [565.0, 13989.0], [564.0, 13818.0], [572.0, 13817.0], [571.0, 13931.0], [570.0, 14122.0], [568.0, 14074.0], [551.0, 14103.0], [550.0, 14189.0], [549.0, 13901.0], [548.0, 14116.0], [547.0, 14113.0], [546.0, 13989.0], [545.0, 13985.0], [544.0, 14223.0], [559.0, 13840.0], [558.0, 13925.0], [557.0, 14101.0], [556.0, 14179.0], [554.0, 14020.0], [553.0, 14021.0], [552.0, 13763.0], [567.0, 13707.0], [566.0, 14042.0], [600.0, 13998.0], [606.0, 13681.0], [607.0, 13939.0], [593.0, 14005.0], [592.0, 13735.0], [595.0, 13994.0], [594.0, 13787.0], [605.0, 13845.0], [604.0, 13717.0], [602.0, 13854.0], [591.0, 13748.0], [576.0, 14020.0], [578.0, 14009.0], [577.0, 13788.0], [580.0, 14029.0], [579.0, 13703.0], [583.0, 13771.0], [581.0, 13795.0], [590.0, 13863.0], [589.0, 13915.0], [588.0, 13760.0], [587.0, 13865.0], [586.0, 13785.0], [585.0, 13832.0], [599.0, 13766.0], [598.0, 14005.0], [597.0, 13754.0], [596.0, 14063.0], [634.0, 13547.0], [638.0, 13640.0], [639.0, 13777.0], [625.0, 13566.0], [624.0, 13750.5], [627.0, 13502.0], [626.0, 13639.0], [629.0, 13790.0], [628.0, 13869.0], [637.0, 13685.0], [636.0, 13485.0], [635.0, 13482.0], [632.0, 13622.0], [615.0, 13795.0], [614.0, 13681.0], [613.0, 13987.0], [612.0, 13676.0], [611.0, 13978.0], [610.0, 13748.0], [609.0, 13691.0], [608.0, 13901.0], [622.0, 13886.0], [621.0, 13932.0], [620.0, 13930.0], [618.0, 13682.0], [617.0, 13562.0], [616.0, 13860.0], [631.0, 13557.0], [630.0, 13614.0], [668.0, 13633.0], [671.0, 13360.0], [656.0, 13658.0], [658.0, 13477.0], [657.0, 13634.0], [661.0, 13668.0], [660.0, 13638.5], [670.0, 13303.0], [669.0, 13316.0], [667.0, 13358.0], [666.0, 13713.0], [665.0, 13662.0], [664.0, 13633.0], [655.0, 13676.0], [640.0, 13686.0], [642.0, 13432.0], [641.0, 13714.0], [644.0, 13749.0], [643.0, 13427.0], [646.0, 13367.0], [645.0, 13667.0], [654.0, 13574.5], [651.0, 13642.0], [650.0, 13358.0], [649.0, 13676.0], [648.0, 13704.0], [663.0, 13429.0], [662.0, 13657.0], [698.0, 13260.0], [702.0, 13185.0], [703.0, 13606.0], [689.0, 13407.0], [688.0, 13517.0], [701.0, 13542.0], [700.0, 13315.0], [699.0, 13532.0], [697.0, 13537.0], [679.0, 13326.0], [678.0, 13460.0], [677.0, 13550.0], [676.0, 13597.0], [675.0, 13614.0], [672.0, 13362.0], [687.0, 13479.0], [686.0, 13562.0], [685.0, 13602.0], [684.0, 13291.0], [683.0, 13588.0], [682.0, 13456.0], [681.0, 13409.0], [680.0, 13449.0], [694.0, 13511.0], [691.0, 13476.5], [729.0, 13382.0], [734.0, 13344.0], [735.0, 13338.0], [721.0, 13468.0], [720.0, 13310.0], [723.0, 13409.0], [722.0, 13143.0], [725.0, 13106.0], [724.0, 13245.0], [733.0, 13341.666666666666], [731.0, 13347.0], [730.0, 13303.0], [728.0, 13337.0], [710.0, 13238.0], [709.0, 13223.0], [708.0, 13260.0], [707.0, 13534.0], [706.0, 13318.0], [705.0, 13510.0], [704.0, 13458.0], [719.0, 13423.0], [718.0, 13516.0], [717.0, 13505.0], [716.0, 13267.0], [715.0, 13203.0], [714.0, 13192.0], [713.0, 13354.0], [727.0, 13323.0], [726.0, 13081.0], [764.0, 13220.0], [767.0, 12942.0], [753.0, 13115.0], [752.0, 13228.5], [755.0, 13094.0], [754.0, 13024.0], [757.0, 13116.0], [756.0, 13245.0], [766.0, 12908.0], [765.0, 13204.0], [763.0, 13084.0], [762.0, 13065.0], [761.0, 13087.0], [760.0, 13303.0], [750.0, 13284.0], [737.0, 13190.0], [740.0, 13341.0], [739.0, 13172.5], [743.0, 13198.0], [741.0, 13299.0], [749.0, 13031.5], [747.0, 13351.0], [746.0, 13303.0], [745.0, 13340.0], [759.0, 13107.0], [758.0, 12995.0], [793.0, 13162.0], [798.0, 12796.0], [799.0, 12807.0], [786.0, 13129.5], [784.0, 13112.0], [788.0, 13057.0], [787.0, 13130.0], [797.0, 12892.5], [796.0, 12852.0], [795.0, 12917.0], [792.0, 12960.5], [775.0, 13062.0], [774.0, 13067.0], [773.0, 12991.0], [772.0, 13252.0], [771.0, 13092.0], [770.0, 13155.0], [769.0, 13193.0], [768.0, 13019.0], [783.0, 13051.0], [782.0, 13206.0], [781.0, 12987.0], [780.0, 13068.0], [779.0, 13045.0], [778.0, 13011.0], [777.0, 12987.0], [776.0, 13246.0], [790.0, 12903.0], [789.0, 13091.0], [828.0, 12356.0], [831.0, 12597.0], [817.0, 12397.0], [816.0, 12773.0], [819.0, 12511.0], [818.0, 12504.0], [821.0, 12704.0], [820.0, 12774.0], [830.0, 12439.0], [829.0, 12659.0], [827.0, 12390.0], [826.0, 12470.0], [825.0, 12693.0], [824.0, 12593.0], [815.0, 12590.0], [801.0, 12692.0], [800.0, 12796.0], [803.0, 12855.0], [802.0, 12624.0], [805.0, 12665.0], [804.0, 12602.0], [807.0, 12555.0], [806.0, 12518.0], [814.0, 12815.0], [813.0, 12823.0], [812.0, 12478.0], [811.0, 12783.0], [810.0, 12747.0], [809.0, 12661.0], [808.0, 12508.0], [823.0, 12756.0], [822.0, 12736.0], [860.0, 12273.0], [863.0, 12165.0], [849.0, 12201.0], [848.0, 12523.0], [851.0, 12441.0], [850.0, 12342.0], [853.0, 12369.0], [852.0, 12422.0], [862.0, 12207.0], [861.0, 12477.0], [859.0, 12207.0], [858.0, 12555.0], [857.0, 12149.0], [856.0, 12208.0], [847.0, 12248.0], [833.0, 12542.0], [832.0, 12675.0], [835.0, 12615.0], [834.0, 12306.0], [837.0, 12241.0], [836.0, 12365.0], [839.0, 12608.0], [838.0, 12439.0], [846.0, 12254.0], [845.0, 12607.0], [844.0, 12571.0], [843.0, 12602.0], [842.0, 12609.0], [841.0, 12569.0], [840.0, 12570.0], [855.0, 12416.0], [854.0, 12257.0], [892.0, 12000.0], [895.0, 11847.0], [881.0, 12116.0], [880.0, 12106.0], [883.0, 12014.0], [882.0, 12039.0], [885.0, 12263.0], [884.0, 11970.0], [894.0, 12067.0], [893.0, 12227.0], [891.0, 12204.0], [890.0, 12163.0], [889.0, 12021.0], [888.0, 12256.0], [879.0, 12001.0], [865.0, 12467.0], [864.0, 12488.0], [867.0, 12233.0], [866.0, 12440.0], [869.0, 12286.0], [868.0, 12223.0], [871.0, 12216.0], [870.0, 12296.0], [878.0, 12164.0], [877.0, 12400.0], [876.0, 12097.0], [875.0, 12193.0], [874.0, 12269.0], [873.0, 12186.0], [872.0, 12498.0], [887.0, 12036.0], [886.0, 12247.0], [924.0, 11886.0], [927.0, 11482.0], [913.0, 11998.0], [912.0, 11822.0], [915.0, 12058.0], [914.0, 11842.0], [917.0, 11794.0], [916.0, 11900.0], [926.0, 11570.0], [925.0, 11656.0], [923.0, 11721.0], [922.0, 11817.0], [921.0, 11529.0], [920.0, 11964.0], [911.0, 11982.0], [896.0, 12008.0], [898.0, 12187.0], [897.0, 12025.0], [900.0, 11844.0], [899.0, 11892.0], [903.0, 12114.0], [902.0, 12174.5], [910.0, 12192.0], [909.0, 12018.5], [906.0, 11846.0], [905.0, 12100.0], [904.0, 12195.0], [919.0, 11684.0], [918.0, 12000.0], [956.0, 10026.0], [959.0, 9692.666666666666], [945.0, 10807.0], [944.0, 11335.0], [947.0, 10613.0], [946.0, 10754.0], [949.0, 10606.0], [948.0, 10434.0], [958.0, 9918.0], [957.0, 9630.0], [955.0, 10029.0], [954.0, 10138.0], [953.0, 10171.0], [952.0, 9973.0], [943.0, 10972.0], [928.0, 11807.0], [931.0, 11643.0], [929.0, 11552.0], [933.0, 11682.0], [932.0, 11731.0], [935.0, 11713.0], [934.0, 11406.0], [942.0, 11573.0], [941.0, 11532.0], [939.0, 9530.0], [938.0, 11381.0], [937.0, 9832.0], [936.0, 11403.0], [951.0, 10316.0], [950.0, 10209.0], [984.0, 8179.0], [989.0, 8244.0], [990.0, 8245.0], [976.0, 9133.0], [988.0, 7913.0], [987.0, 8368.0], [985.0, 8190.0], [975.0, 9132.0], [962.0, 9688.0], [961.0, 9597.0], [964.0, 9470.0], [963.0, 9456.0], [967.0, 9624.0], [965.0, 9679.0], [974.0, 9011.0], [973.0, 9136.0], [972.0, 9321.0], [971.0, 9216.0], [970.0, 9383.0], [969.0, 9452.0], [968.0, 9506.0], [983.0, 8501.0], [982.0, 8606.0], [978.0, 8624.0], [977.0, 8671.0], [1000.0, 8079.0], [999.0, 8217.0], [998.0, 8229.0], [997.0, 7963.0], [996.0, 7920.0], [995.0, 8246.0], [994.0, 8240.0], [993.0, 8054.0], [1.0, 15856.0]], "isOverall": false, "label": "HTTP请求", "isController": false}, {"data": [[524.268, 13900.686999999998]], "isOverall": false, "label": "HTTP请求-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2183.3333333333335, "minX": 1.65373044E12, "maxY": 20232.6, "series": [{"data": [[1.65373044E12, 20232.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65373044E12, 2183.3333333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65373044E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 13900.686999999998, "minX": 1.65373044E12, "maxY": 13900.686999999998, "series": [{"data": [[1.65373044E12, 13900.686999999998]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65373044E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13900.659000000016, "minX": 1.65373044E12, "maxY": 13900.659000000016, "series": [{"data": [[1.65373044E12, 13900.659000000016]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65373044E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 13228.731000000014, "minX": 1.65373044E12, "maxY": 13228.731000000014, "series": [{"data": [[1.65373044E12, 13228.731000000014]], "isOverall": false, "label": "HTTP请求", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65373044E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7913.0, "minX": 1.65373044E12, "maxY": 15886.0, "series": [{"data": [[1.65373044E12, 15886.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65373044E12, 15434.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65373044E12, 15723.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65373044E12, 15554.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65373044E12, 7913.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65373044E12, 14330.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65373044E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8169.0, "minX": 7.0, "maxY": 15554.0, "series": [{"data": [[156.0, 13059.5], [20.0, 8169.0], [84.0, 12062.5], [11.0, 9132.0], [95.0, 15554.0], [24.0, 9683.5], [395.0, 15107.0], [208.0, 13811.0], [7.0, 10754.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 395.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 8169.0, "minX": 7.0, "maxY": 15554.0, "series": [{"data": [[156.0, 13059.5], [20.0, 8169.0], [84.0, 12062.5], [11.0, 9132.0], [95.0, 15554.0], [24.0, 9683.5], [395.0, 15107.0], [208.0, 13811.0], [7.0, 10754.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 395.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65373044E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65373044E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65373044E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65373044E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65373044E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65373044E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65373044E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65373044E12, 16.666666666666668]], "isOverall": false, "label": "HTTP请求-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65373044E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65373044E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65373044E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65373044E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

