/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11357.0, "minX": 0.0, "maxY": 21257.0, "series": [{"data": [[0.0, 11357.0], [0.1, 12630.0], [0.2, 12871.0], [0.3, 12871.0], [0.4, 12993.0], [0.5, 12993.0], [0.6, 12993.0], [0.7, 13056.0], [0.8, 13303.0], [0.9, 13415.0], [1.0, 13496.0], [1.1, 13626.0], [1.2, 13626.0], [1.3, 13963.0], [1.4, 14214.0], [1.5, 14246.0], [1.6, 14284.0], [1.7, 14329.0], [1.8, 14371.0], [1.9, 14374.0], [2.0, 14379.0], [2.1, 14456.0], [2.2, 14484.0], [2.3, 14516.0], [2.4, 14579.0], [2.5, 14626.0], [2.6, 14689.0], [2.7, 14704.0], [2.8, 14759.0], [2.9, 14778.0], [3.0, 14856.0], [3.1, 14877.0], [3.2, 14882.0], [3.3, 14951.0], [3.4, 15071.0], [3.5, 15537.0], [3.6, 15602.0], [3.7, 15731.0], [3.8, 15790.0], [3.9, 15829.0], [4.0, 15856.0], [4.1, 15857.0], [4.2, 15866.0], [4.3, 15868.0], [4.4, 15932.0], [4.5, 15947.0], [4.6, 16018.0], [4.7, 16179.0], [4.8, 16194.0], [4.9, 16209.0], [5.0, 16214.0], [5.1, 16231.0], [5.2, 16245.0], [5.3, 16249.0], [5.4, 16252.0], [5.5, 16310.0], [5.6, 16337.0], [5.7, 16421.0], [5.8, 16423.0], [5.9, 16456.0], [6.0, 16484.0], [6.1, 16553.0], [6.2, 16563.0], [6.3, 16600.0], [6.4, 16602.0], [6.5, 16633.0], [6.6, 16635.0], [6.7, 16645.0], [6.8, 16657.0], [6.9, 16661.0], [7.0, 16666.0], [7.1, 16669.0], [7.2, 16689.0], [7.3, 16699.0], [7.4, 16726.0], [7.5, 16746.0], [7.6, 16763.0], [7.7, 16766.0], [7.8, 16794.0], [7.9, 16800.0], [8.0, 16825.0], [8.1, 16846.0], [8.2, 16849.0], [8.3, 16855.0], [8.4, 16858.0], [8.5, 16890.0], [8.6, 16897.0], [8.7, 16899.0], [8.8, 16901.0], [8.9, 16904.0], [9.0, 16928.0], [9.1, 16932.0], [9.2, 16936.0], [9.3, 16944.0], [9.4, 16951.0], [9.5, 16960.0], [9.6, 16975.0], [9.7, 16991.0], [9.8, 16992.0], [9.9, 16996.0], [10.0, 17014.0], [10.1, 17028.0], [10.2, 17050.0], [10.3, 17058.0], [10.4, 17073.0], [10.5, 17087.0], [10.6, 17092.0], [10.7, 17102.0], [10.8, 17145.0], [10.9, 17165.0], [11.0, 17175.0], [11.1, 17223.0], [11.2, 17224.0], [11.3, 17228.0], [11.4, 17232.0], [11.5, 17240.0], [11.6, 17241.0], [11.7, 17252.0], [11.8, 17257.0], [11.9, 17282.0], [12.0, 17289.0], [12.1, 17291.0], [12.2, 17292.0], [12.3, 17298.0], [12.4, 17303.0], [12.5, 17303.0], [12.6, 17323.0], [12.7, 17331.0], [12.8, 17338.0], [12.9, 17354.0], [13.0, 17362.0], [13.1, 17385.0], [13.2, 17388.0], [13.3, 17395.0], [13.4, 17407.0], [13.5, 17409.0], [13.6, 17410.0], [13.7, 17410.0], [13.8, 17413.0], [13.9, 17416.0], [14.0, 17416.0], [14.1, 17420.0], [14.2, 17427.0], [14.3, 17431.0], [14.4, 17432.0], [14.5, 17434.0], [14.6, 17440.0], [14.7, 17441.0], [14.8, 17446.0], [14.9, 17450.0], [15.0, 17456.0], [15.1, 17460.0], [15.2, 17463.0], [15.3, 17464.0], [15.4, 17472.0], [15.5, 17473.0], [15.6, 17478.0], [15.7, 17480.0], [15.8, 17482.0], [15.9, 17483.0], [16.0, 17484.0], [16.1, 17485.0], [16.2, 17490.0], [16.3, 17492.0], [16.4, 17495.0], [16.5, 17496.0], [16.6, 17499.0], [16.7, 17519.0], [16.8, 17521.0], [16.9, 17523.0], [17.0, 17528.0], [17.1, 17528.0], [17.2, 17532.0], [17.3, 17539.0], [17.4, 17542.0], [17.5, 17546.0], [17.6, 17548.0], [17.7, 17567.0], [17.8, 17567.0], [17.9, 17572.0], [18.0, 17573.0], [18.1, 17585.0], [18.2, 17600.0], [18.3, 17602.0], [18.4, 17605.0], [18.5, 17610.0], [18.6, 17610.0], [18.7, 17612.0], [18.8, 17613.0], [18.9, 17613.0], [19.0, 17617.0], [19.1, 17618.0], [19.2, 17620.0], [19.3, 17621.0], [19.4, 17629.0], [19.5, 17639.0], [19.6, 17652.0], [19.7, 17653.0], [19.8, 17655.0], [19.9, 17655.0], [20.0, 17663.0], [20.1, 17668.0], [20.2, 17670.0], [20.3, 17670.0], [20.4, 17675.0], [20.5, 17694.0], [20.6, 17699.0], [20.7, 17702.0], [20.8, 17711.0], [20.9, 17717.0], [21.0, 17717.0], [21.1, 17718.0], [21.2, 17722.0], [21.3, 17723.0], [21.4, 17724.0], [21.5, 17726.0], [21.6, 17732.0], [21.7, 17740.0], [21.8, 17746.0], [21.9, 17749.0], [22.0, 17758.0], [22.1, 17761.0], [22.2, 17764.0], [22.3, 17768.0], [22.4, 17768.0], [22.5, 17771.0], [22.6, 17772.0], [22.7, 17773.0], [22.8, 17782.0], [22.9, 17783.0], [23.0, 17784.0], [23.1, 17796.0], [23.2, 17807.0], [23.3, 17809.0], [23.4, 17810.0], [23.5, 17810.0], [23.6, 17812.0], [23.7, 17813.0], [23.8, 17819.0], [23.9, 17822.0], [24.0, 17831.0], [24.1, 17834.0], [24.2, 17838.0], [24.3, 17841.0], [24.4, 17842.0], [24.5, 17844.0], [24.6, 17844.0], [24.7, 17853.0], [24.8, 17853.0], [24.9, 17857.0], [25.0, 17872.0], [25.1, 17876.0], [25.2, 17878.0], [25.3, 17883.0], [25.4, 17883.0], [25.5, 17884.0], [25.6, 17888.0], [25.7, 17894.0], [25.8, 17898.0], [25.9, 17898.0], [26.0, 17899.0], [26.1, 17901.0], [26.2, 17903.0], [26.3, 17904.0], [26.4, 17912.0], [26.5, 17915.0], [26.6, 17928.0], [26.7, 17931.0], [26.8, 17937.0], [26.9, 17938.0], [27.0, 17938.0], [27.1, 17950.0], [27.2, 17958.0], [27.3, 17959.0], [27.4, 17959.0], [27.5, 17964.0], [27.6, 17974.0], [27.7, 17975.0], [27.8, 17976.0], [27.9, 17979.0], [28.0, 17983.0], [28.1, 17985.0], [28.2, 17989.0], [28.3, 17995.0], [28.4, 17997.0], [28.5, 18022.0], [28.6, 18035.0], [28.7, 18039.0], [28.8, 18039.0], [28.9, 18044.0], [29.0, 18049.0], [29.1, 18051.0], [29.2, 18061.0], [29.3, 18068.0], [29.4, 18070.0], [29.5, 18073.0], [29.6, 18078.0], [29.7, 18085.0], [29.8, 18089.0], [29.9, 18092.0], [30.0, 18093.0], [30.1, 18096.0], [30.2, 18097.0], [30.3, 18098.0], [30.4, 18102.0], [30.5, 18110.0], [30.6, 18125.0], [30.7, 18126.0], [30.8, 18130.0], [30.9, 18135.0], [31.0, 18137.0], [31.1, 18138.0], [31.2, 18139.0], [31.3, 18139.0], [31.4, 18145.0], [31.5, 18155.0], [31.6, 18160.0], [31.7, 18163.0], [31.8, 18165.0], [31.9, 18166.0], [32.0, 18166.0], [32.1, 18194.0], [32.2, 18197.0], [32.3, 18198.0], [32.4, 18205.0], [32.5, 18207.0], [32.6, 18209.0], [32.7, 18209.0], [32.8, 18210.0], [32.9, 18217.0], [33.0, 18228.0], [33.1, 18233.0], [33.2, 18236.0], [33.3, 18263.0], [33.4, 18267.0], [33.5, 18270.0], [33.6, 18274.0], [33.7, 18278.0], [33.8, 18288.0], [33.9, 18289.0], [34.0, 18297.0], [34.1, 18298.0], [34.2, 18300.0], [34.3, 18322.0], [34.4, 18334.0], [34.5, 18339.0], [34.6, 18356.0], [34.7, 18358.0], [34.8, 18360.0], [34.9, 18369.0], [35.0, 18370.0], [35.1, 18376.0], [35.2, 18377.0], [35.3, 18381.0], [35.4, 18385.0], [35.5, 18387.0], [35.6, 18388.0], [35.7, 18392.0], [35.8, 18393.0], [35.9, 18393.0], [36.0, 18402.0], [36.1, 18405.0], [36.2, 18406.0], [36.3, 18408.0], [36.4, 18408.0], [36.5, 18408.0], [36.6, 18415.0], [36.7, 18419.0], [36.8, 18428.0], [36.9, 18428.0], [37.0, 18429.0], [37.1, 18430.0], [37.2, 18431.0], [37.3, 18432.0], [37.4, 18433.0], [37.5, 18435.0], [37.6, 18436.0], [37.7, 18437.0], [37.8, 18437.0], [37.9, 18441.0], [38.0, 18443.0], [38.1, 18446.0], [38.2, 18452.0], [38.3, 18453.0], [38.4, 18453.0], [38.5, 18458.0], [38.6, 18464.0], [38.7, 18467.0], [38.8, 18469.0], [38.9, 18478.0], [39.0, 18480.0], [39.1, 18485.0], [39.2, 18497.0], [39.3, 18498.0], [39.4, 18499.0], [39.5, 18500.0], [39.6, 18502.0], [39.7, 18505.0], [39.8, 18506.0], [39.9, 18507.0], [40.0, 18508.0], [40.1, 18514.0], [40.2, 18517.0], [40.3, 18519.0], [40.4, 18521.0], [40.5, 18524.0], [40.6, 18535.0], [40.7, 18542.0], [40.8, 18542.0], [40.9, 18551.0], [41.0, 18553.0], [41.1, 18554.0], [41.2, 18556.0], [41.3, 18557.0], [41.4, 18560.0], [41.5, 18561.0], [41.6, 18562.0], [41.7, 18562.0], [41.8, 18564.0], [41.9, 18564.0], [42.0, 18566.0], [42.1, 18570.0], [42.2, 18571.0], [42.3, 18571.0], [42.4, 18573.0], [42.5, 18575.0], [42.6, 18577.0], [42.7, 18578.0], [42.8, 18579.0], [42.9, 18579.0], [43.0, 18584.0], [43.1, 18587.0], [43.2, 18587.0], [43.3, 18589.0], [43.4, 18590.0], [43.5, 18592.0], [43.6, 18597.0], [43.7, 18597.0], [43.8, 18598.0], [43.9, 18601.0], [44.0, 18604.0], [44.1, 18605.0], [44.2, 18609.0], [44.3, 18610.0], [44.4, 18611.0], [44.5, 18617.0], [44.6, 18622.0], [44.7, 18624.0], [44.8, 18628.0], [44.9, 18632.0], [45.0, 18633.0], [45.1, 18633.0], [45.2, 18634.0], [45.3, 18634.0], [45.4, 18640.0], [45.5, 18640.0], [45.6, 18641.0], [45.7, 18642.0], [45.8, 18643.0], [45.9, 18644.0], [46.0, 18645.0], [46.1, 18653.0], [46.2, 18654.0], [46.3, 18654.0], [46.4, 18658.0], [46.5, 18659.0], [46.6, 18661.0], [46.7, 18671.0], [46.8, 18673.0], [46.9, 18676.0], [47.0, 18678.0], [47.1, 18681.0], [47.2, 18686.0], [47.3, 18696.0], [47.4, 18702.0], [47.5, 18708.0], [47.6, 18711.0], [47.7, 18713.0], [47.8, 18713.0], [47.9, 18714.0], [48.0, 18714.0], [48.1, 18716.0], [48.2, 18718.0], [48.3, 18731.0], [48.4, 18732.0], [48.5, 18741.0], [48.6, 18747.0], [48.7, 18748.0], [48.8, 18749.0], [48.9, 18764.0], [49.0, 18770.0], [49.1, 18778.0], [49.2, 18778.0], [49.3, 18781.0], [49.4, 18781.0], [49.5, 18785.0], [49.6, 18786.0], [49.7, 18788.0], [49.8, 18789.0], [49.9, 18790.0], [50.0, 18796.0], [50.1, 18797.0], [50.2, 18803.0], [50.3, 18803.0], [50.4, 18809.0], [50.5, 18814.0], [50.6, 18826.0], [50.7, 18829.0], [50.8, 18830.0], [50.9, 18841.0], [51.0, 18848.0], [51.1, 18852.0], [51.2, 18852.0], [51.3, 18855.0], [51.4, 18856.0], [51.5, 18856.0], [51.6, 18858.0], [51.7, 18864.0], [51.8, 18867.0], [51.9, 18876.0], [52.0, 18876.0], [52.1, 18879.0], [52.2, 18886.0], [52.3, 18890.0], [52.4, 18897.0], [52.5, 18898.0], [52.6, 18907.0], [52.7, 18912.0], [52.8, 18914.0], [52.9, 18916.0], [53.0, 18918.0], [53.1, 18919.0], [53.2, 18922.0], [53.3, 18922.0], [53.4, 18926.0], [53.5, 18930.0], [53.6, 18932.0], [53.7, 18938.0], [53.8, 18941.0], [53.9, 18945.0], [54.0, 18945.0], [54.1, 18950.0], [54.2, 18951.0], [54.3, 18963.0], [54.4, 18964.0], [54.5, 18973.0], [54.6, 18981.0], [54.7, 18986.0], [54.8, 19017.0], [54.9, 19032.0], [55.0, 19034.0], [55.1, 19035.0], [55.2, 19035.0], [55.3, 19041.0], [55.4, 19046.0], [55.5, 19047.0], [55.6, 19051.0], [55.7, 19060.0], [55.8, 19064.0], [55.9, 19073.0], [56.0, 19075.0], [56.1, 19082.0], [56.2, 19085.0], [56.3, 19094.0], [56.4, 19105.0], [56.5, 19109.0], [56.6, 19120.0], [56.7, 19121.0], [56.8, 19125.0], [56.9, 19127.0], [57.0, 19140.0], [57.1, 19144.0], [57.2, 19159.0], [57.3, 19160.0], [57.4, 19160.0], [57.5, 19164.0], [57.6, 19169.0], [57.7, 19171.0], [57.8, 19172.0], [57.9, 19176.0], [58.0, 19178.0], [58.1, 19181.0], [58.2, 19182.0], [58.3, 19182.0], [58.4, 19183.0], [58.5, 19184.0], [58.6, 19186.0], [58.7, 19187.0], [58.8, 19189.0], [58.9, 19191.0], [59.0, 19192.0], [59.1, 19192.0], [59.2, 19194.0], [59.3, 19196.0], [59.4, 19197.0], [59.5, 19197.0], [59.6, 19202.0], [59.7, 19210.0], [59.8, 19214.0], [59.9, 19214.0], [60.0, 19221.0], [60.1, 19222.0], [60.2, 19222.0], [60.3, 19222.0], [60.4, 19224.0], [60.5, 19234.0], [60.6, 19242.0], [60.7, 19243.0], [60.8, 19246.0], [60.9, 19252.0], [61.0, 19252.0], [61.1, 19253.0], [61.2, 19261.0], [61.3, 19262.0], [61.4, 19262.0], [61.5, 19269.0], [61.6, 19270.0], [61.7, 19273.0], [61.8, 19274.0], [61.9, 19284.0], [62.0, 19286.0], [62.1, 19290.0], [62.2, 19291.0], [62.3, 19296.0], [62.4, 19297.0], [62.5, 19297.0], [62.6, 19298.0], [62.7, 19299.0], [62.8, 19302.0], [62.9, 19306.0], [63.0, 19310.0], [63.1, 19310.0], [63.2, 19310.0], [63.3, 19312.0], [63.4, 19313.0], [63.5, 19315.0], [63.6, 19316.0], [63.7, 19320.0], [63.8, 19321.0], [63.9, 19322.0], [64.0, 19324.0], [64.1, 19326.0], [64.2, 19328.0], [64.3, 19329.0], [64.4, 19331.0], [64.5, 19331.0], [64.6, 19337.0], [64.7, 19342.0], [64.8, 19344.0], [64.9, 19348.0], [65.0, 19353.0], [65.1, 19355.0], [65.2, 19377.0], [65.3, 19383.0], [65.4, 19386.0], [65.5, 19386.0], [65.6, 19396.0], [65.7, 19401.0], [65.8, 19405.0], [65.9, 19409.0], [66.0, 19411.0], [66.1, 19411.0], [66.2, 19419.0], [66.3, 19422.0], [66.4, 19423.0], [66.5, 19424.0], [66.6, 19425.0], [66.7, 19427.0], [66.8, 19427.0], [66.9, 19431.0], [67.0, 19435.0], [67.1, 19437.0], [67.2, 19438.0], [67.3, 19439.0], [67.4, 19447.0], [67.5, 19449.0], [67.6, 19450.0], [67.7, 19451.0], [67.8, 19460.0], [67.9, 19463.0], [68.0, 19464.0], [68.1, 19466.0], [68.2, 19467.0], [68.3, 19470.0], [68.4, 19470.0], [68.5, 19471.0], [68.6, 19474.0], [68.7, 19475.0], [68.8, 19475.0], [68.9, 19484.0], [69.0, 19486.0], [69.1, 19492.0], [69.2, 19499.0], [69.3, 19506.0], [69.4, 19506.0], [69.5, 19508.0], [69.6, 19508.0], [69.7, 19509.0], [69.8, 19510.0], [69.9, 19512.0], [70.0, 19514.0], [70.1, 19516.0], [70.2, 19518.0], [70.3, 19527.0], [70.4, 19530.0], [70.5, 19531.0], [70.6, 19535.0], [70.7, 19543.0], [70.8, 19557.0], [70.9, 19557.0], [71.0, 19564.0], [71.1, 19573.0], [71.2, 19577.0], [71.3, 19580.0], [71.4, 19582.0], [71.5, 19585.0], [71.6, 19585.0], [71.7, 19590.0], [71.8, 19596.0], [71.9, 19600.0], [72.0, 19617.0], [72.1, 19618.0], [72.2, 19622.0], [72.3, 19641.0], [72.4, 19646.0], [72.5, 19652.0], [72.6, 19660.0], [72.7, 19672.0], [72.8, 19692.0], [72.9, 19694.0], [73.0, 19705.0], [73.1, 19706.0], [73.2, 19707.0], [73.3, 19710.0], [73.4, 19714.0], [73.5, 19715.0], [73.6, 19716.0], [73.7, 19719.0], [73.8, 19724.0], [73.9, 19725.0], [74.0, 19725.0], [74.1, 19725.0], [74.2, 19730.0], [74.3, 19730.0], [74.4, 19738.0], [74.5, 19738.0], [74.6, 19743.0], [74.7, 19748.0], [74.8, 19749.0], [74.9, 19751.0], [75.0, 19751.0], [75.1, 19756.0], [75.2, 19759.0], [75.3, 19762.0], [75.4, 19764.0], [75.5, 19765.0], [75.6, 19766.0], [75.7, 19766.0], [75.8, 19770.0], [75.9, 19775.0], [76.0, 19781.0], [76.1, 19791.0], [76.2, 19792.0], [76.3, 19797.0], [76.4, 19805.0], [76.5, 19808.0], [76.6, 19812.0], [76.7, 19819.0], [76.8, 19821.0], [76.9, 19840.0], [77.0, 19851.0], [77.1, 19853.0], [77.2, 19863.0], [77.3, 19863.0], [77.4, 19874.0], [77.5, 19877.0], [77.6, 19880.0], [77.7, 19908.0], [77.8, 19910.0], [77.9, 19920.0], [78.0, 19949.0], [78.1, 19951.0], [78.2, 19967.0], [78.3, 19977.0], [78.4, 19982.0], [78.5, 19983.0], [78.6, 19987.0], [78.7, 19993.0], [78.8, 19995.0], [78.9, 20018.0], [79.0, 20022.0], [79.1, 20027.0], [79.2, 20031.0], [79.3, 20034.0], [79.4, 20035.0], [79.5, 20039.0], [79.6, 20044.0], [79.7, 20052.0], [79.8, 20053.0], [79.9, 20053.0], [80.0, 20058.0], [80.1, 20058.0], [80.2, 20060.0], [80.3, 20073.0], [80.4, 20096.0], [80.5, 20105.0], [80.6, 20122.0], [80.7, 20136.0], [80.8, 20141.0], [80.9, 20144.0], [81.0, 20157.0], [81.1, 20167.0], [81.2, 20177.0], [81.3, 20183.0], [81.4, 20197.0], [81.5, 20200.0], [81.6, 20201.0], [81.7, 20204.0], [81.8, 20214.0], [81.9, 20223.0], [82.0, 20240.0], [82.1, 20255.0], [82.2, 20275.0], [82.3, 20288.0], [82.4, 20309.0], [82.5, 20318.0], [82.6, 20319.0], [82.7, 20339.0], [82.8, 20345.0], [82.9, 20353.0], [83.0, 20368.0], [83.1, 20378.0], [83.2, 20378.0], [83.3, 20380.0], [83.4, 20380.0], [83.5, 20382.0], [83.6, 20391.0], [83.7, 20395.0], [83.8, 20401.0], [83.9, 20412.0], [84.0, 20414.0], [84.1, 20424.0], [84.2, 20429.0], [84.3, 20475.0], [84.4, 20484.0], [84.5, 20513.0], [84.6, 20563.0], [84.7, 20571.0], [84.8, 20596.0], [84.9, 20603.0], [85.0, 20617.0], [85.1, 20618.0], [85.2, 20618.0], [85.3, 20620.0], [85.4, 20624.0], [85.5, 20625.0], [85.6, 20647.0], [85.7, 20666.0], [85.8, 20666.0], [85.9, 20670.0], [86.0, 20674.0], [86.1, 20676.0], [86.2, 20679.0], [86.3, 20684.0], [86.4, 20686.0], [86.5, 20688.0], [86.6, 20700.0], [86.7, 20701.0], [86.8, 20723.0], [86.9, 20724.0], [87.0, 20724.0], [87.1, 20725.0], [87.2, 20733.0], [87.3, 20740.0], [87.4, 20751.0], [87.5, 20751.0], [87.6, 20758.0], [87.7, 20766.0], [87.8, 20773.0], [87.9, 20777.0], [88.0, 20778.0], [88.1, 20783.0], [88.2, 20785.0], [88.3, 20790.0], [88.4, 20792.0], [88.5, 20807.0], [88.6, 20812.0], [88.7, 20819.0], [88.8, 20819.0], [88.9, 20820.0], [89.0, 20835.0], [89.1, 20843.0], [89.2, 20850.0], [89.3, 20853.0], [89.4, 20856.0], [89.5, 20857.0], [89.6, 20858.0], [89.7, 20858.0], [89.8, 20859.0], [89.9, 20863.0], [90.0, 20874.0], [90.1, 20875.0], [90.2, 20877.0], [90.3, 20877.0], [90.4, 20879.0], [90.5, 20885.0], [90.6, 20937.0], [90.7, 20959.0], [90.8, 20963.0], [90.9, 20964.0], [91.0, 20964.0], [91.1, 20966.0], [91.2, 20976.0], [91.3, 20977.0], [91.4, 20979.0], [91.5, 20996.0], [91.6, 20996.0], [91.7, 20996.0], [91.8, 21002.0], [91.9, 21003.0], [92.0, 21006.0], [92.1, 21008.0], [92.2, 21013.0], [92.3, 21019.0], [92.4, 21020.0], [92.5, 21021.0], [92.6, 21021.0], [92.7, 21022.0], [92.8, 21022.0], [92.9, 21023.0], [93.0, 21026.0], [93.1, 21030.0], [93.2, 21034.0], [93.3, 21034.0], [93.4, 21038.0], [93.5, 21045.0], [93.6, 21054.0], [93.7, 21054.0], [93.8, 21055.0], [93.9, 21056.0], [94.0, 21059.0], [94.1, 21060.0], [94.2, 21062.0], [94.3, 21065.0], [94.4, 21067.0], [94.5, 21070.0], [94.6, 21072.0], [94.7, 21074.0], [94.8, 21083.0], [94.9, 21086.0], [95.0, 21092.0], [95.1, 21093.0], [95.2, 21094.0], [95.3, 21096.0], [95.4, 21096.0], [95.5, 21098.0], [95.6, 21103.0], [95.7, 21106.0], [95.8, 21111.0], [95.9, 21114.0], [96.0, 21115.0], [96.1, 21118.0], [96.2, 21123.0], [96.3, 21126.0], [96.4, 21128.0], [96.5, 21129.0], [96.6, 21136.0], [96.7, 21137.0], [96.8, 21141.0], [96.9, 21142.0], [97.0, 21145.0], [97.1, 21148.0], [97.2, 21148.0], [97.3, 21150.0], [97.4, 21151.0], [97.5, 21151.0], [97.6, 21152.0], [97.7, 21157.0], [97.8, 21158.0], [97.9, 21159.0], [98.0, 21159.0], [98.1, 21161.0], [98.2, 21165.0], [98.3, 21166.0], [98.4, 21175.0], [98.5, 21175.0], [98.6, 21176.0], [98.7, 21185.0], [98.8, 21187.0], [98.9, 21188.0], [99.0, 21196.0], [99.1, 21200.0], [99.2, 21200.0], [99.3, 21202.0], [99.4, 21203.0], [99.5, 21206.0], [99.6, 21220.0], [99.7, 21234.0], [99.8, 21247.0], [99.9, 21257.0]], "isOverall": false, "label": "https://www.baidu.com/", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 11300.0, "maxY": 44.0, "series": [{"data": [[11300.0, 1.0], [12600.0, 1.0], [12800.0, 1.0], [12900.0, 3.0], [13000.0, 1.0], [13100.0, 1.0], [13300.0, 1.0], [13400.0, 2.0], [13600.0, 1.0], [14200.0, 3.0], [14300.0, 4.0], [13900.0, 1.0], [14400.0, 2.0], [14500.0, 2.0], [14600.0, 2.0], [14800.0, 3.0], [14700.0, 3.0], [14900.0, 1.0], [15000.0, 1.0], [15800.0, 5.0], [15500.0, 1.0], [15600.0, 1.0], [15700.0, 2.0], [16100.0, 2.0], [16200.0, 6.0], [15900.0, 2.0], [16000.0, 2.0], [16300.0, 2.0], [17400.0, 33.0], [16800.0, 9.0], [16700.0, 5.0], [16600.0, 11.0], [17000.0, 7.0], [16900.0, 12.0], [17100.0, 4.0], [17200.0, 13.0], [17300.0, 10.0], [16400.0, 4.0], [16500.0, 2.0], [18200.0, 18.0], [17500.0, 15.0], [17600.0, 24.0], [17700.0, 25.0], [17900.0, 24.0], [18000.0, 19.0], [17800.0, 29.0], [18100.0, 20.0], [18300.0, 18.0], [18400.0, 35.0], [19200.0, 32.0], [18500.0, 44.0], [18600.0, 35.0], [18700.0, 28.0], [18800.0, 24.0], [18900.0, 22.0], [19000.0, 16.0], [19100.0, 32.0], [19300.0, 29.0], [19400.0, 36.0], [19600.0, 11.0], [19500.0, 26.0], [19700.0, 34.0], [19800.0, 13.0], [19900.0, 13.0], [20000.0, 16.0], [20100.0, 10.0], [20200.0, 9.0], [20300.0, 14.0], [20400.0, 7.0], [20600.0, 17.0], [20700.0, 19.0], [20500.0, 4.0], [20800.0, 21.0], [20900.0, 12.0], [21000.0, 38.0], [21100.0, 35.0], [21200.0, 9.0]], "isOverall": false, "label": "https://www.baidu.com/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 777.7368951612907, "minX": 1.65373014E12, "maxY": 997.25, "series": [{"data": [[1.65373014E12, 997.25], [1.6537302E12, 777.7368951612907]], "isOverall": false, "label": "线程组", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6537302E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11357.0, "minX": 1.0, "maxY": 21257.0, "series": [{"data": [[2.0, 21137.0], [5.0, 20785.5], [7.0, 20455.5], [8.0, 19766.0], [9.0, 21176.0], [10.0, 20724.0], [11.0, 21247.0], [12.0, 21257.0], [13.0, 19707.0], [14.0, 21136.0], [15.0, 20391.0], [16.0, 21103.0], [17.0, 20877.0], [19.0, 19765.5], [26.0, 20136.0], [29.0, 21083.0], [30.0, 21055.0], [31.0, 21152.0], [33.0, 20416.0], [34.0, 21148.0], [38.0, 19760.5], [40.0, 21234.0], [43.0, 21188.0], [42.0, 21090.0], [45.0, 20471.5], [49.0, 21137.5], [48.0, 20990.5], [51.0, 20761.5], [53.0, 20956.5], [55.0, 20725.0], [57.0, 20966.0], [59.0, 20479.0], [61.0, 20638.0], [63.0, 20433.5], [67.0, 21149.0], [65.0, 21060.5], [71.0, 20429.0], [70.0, 21142.0], [69.0, 21054.0], [68.0, 21165.0], [75.0, 21007.5], [73.0, 21003.0], [72.0, 20952.0], [79.0, 19743.0], [78.0, 20493.5], [77.0, 21045.0], [76.0, 20197.0], [83.0, 20996.0], [82.0, 20365.0], [80.0, 20294.0], [87.0, 20455.0], [86.0, 21202.0], [85.0, 21094.0], [91.0, 19964.0], [89.0, 20700.0], [94.0, 21118.0], [92.0, 21145.0], [96.0, 21196.0], [101.0, 20292.0], [107.0, 21094.0], [106.0, 21126.0], [112.0, 20979.0], [119.0, 19751.0], [122.0, 20339.0], [125.0, 21022.0], [132.0, 20964.0], [129.0, 20073.0], [140.0, 20319.0], [136.0, 20060.0], [151.0, 20966.0], [144.0, 21129.0], [158.0, 20096.0], [155.0, 19749.0], [161.0, 21185.0], [173.0, 20414.0], [169.0, 21020.0], [181.0, 21060.0], [179.0, 20977.0], [177.0, 19706.0], [190.0, 20959.0], [187.0, 21086.0], [184.0, 21022.0], [194.0, 21106.0], [205.0, 21115.0], [201.0, 21175.0], [210.0, 19694.0], [219.0, 19725.0], [221.0, 21062.0], [230.0, 21111.0], [226.0, 20792.0], [238.0, 21159.0], [234.0, 20039.0], [246.0, 20963.0], [241.0, 21166.0], [255.0, 21161.0], [251.0, 21157.0], [269.0, 21034.0], [263.0, 20976.0], [259.0, 20783.0], [287.0, 19672.0], [279.0, 21151.0], [278.0, 21158.0], [273.0, 21067.0], [298.0, 20813.0], [294.0, 20345.0], [291.0, 20122.0], [314.0, 20785.0], [310.0, 21038.0], [307.0, 21021.0], [328.0, 20766.0], [325.0, 21054.0], [343.0, 19660.0], [336.0, 20964.0], [360.0, 21128.0], [357.0, 20034.0], [408.0, 21026.0], [444.0, 21013.0], [441.0, 20877.0], [463.0, 20223.0], [453.0, 21056.0], [479.0, 20058.0], [495.0, 20875.0], [482.0, 19585.0], [511.0, 20856.0], [506.0, 21002.0], [499.0, 19618.0], [539.0, 21059.0], [525.0, 19600.0], [514.0, 19580.0], [570.0, 20858.0], [567.0, 19925.5], [563.0, 20255.0], [548.0, 20853.0], [606.0, 20365.0], [614.0, 20937.0], [610.0, 19582.0], [688.0, 20620.0], [715.0, 19508.0], [767.0, 20701.0], [766.0, 20850.0], [765.0, 20807.0], [764.0, 20670.0], [760.0, 19851.5], [754.0, 20857.0], [751.0, 20859.0], [747.0, 20513.0], [794.0, 19715.0], [788.0, 19705.0], [786.0, 20740.0], [778.0, 20414.0], [775.0, 20843.0], [773.0, 20812.0], [770.0, 19951.0], [769.0, 20144.5], [815.0, 20819.0], [814.0, 20725.0], [813.0, 20618.0], [810.0, 19291.5], [808.0, 17841.0], [807.0, 16763.0], [803.0, 17617.0], [800.0, 17612.0], [863.0, 20424.0], [862.0, 20617.0], [860.0, 20790.0], [859.0, 19328.0], [855.0, 20674.0], [852.0, 19331.0], [841.0, 20724.0], [878.0, 18885.5], [885.0, 18642.0], [884.0, 18688.6], [883.0, 18850.0], [868.0, 20571.0], [867.0, 19324.0], [866.0, 19982.0], [865.0, 19329.0], [864.0, 20688.0], [877.0, 13496.0], [876.0, 18925.0], [875.0, 18764.57446808511], [874.0, 19360.82986111112], [873.0, 19655.5], [927.0, 17629.425000000003], [926.0, 18177.216000000015], [925.0, 18329.8024691358], [922.0, 17492.0], [917.0, 17894.0], [914.0, 18764.0], [913.0, 18963.0], [956.0, 16004.0], [959.0, 16052.0], [945.0, 16421.0], [944.0, 16337.0], [947.0, 17420.0], [946.0, 17323.0], [949.0, 17292.0], [948.0, 17291.0], [958.0, 15731.0], [957.0, 17073.0], [955.0, 15790.0], [954.0, 17282.0], [953.0, 15856.0], [952.0, 15857.0], [943.0, 17338.0], [929.0, 17490.0], [928.0, 17422.717171717173], [931.0, 17480.0], [930.0, 17483.0], [935.0, 16730.0], [933.0, 17060.0], [942.0, 17023.5], [941.0, 17427.0], [940.0, 17410.0], [939.0, 17446.0], [938.0, 17485.0], [937.0, 17473.0], [936.0, 17600.0], [951.0, 15866.0], [950.0, 16991.0], [967.0, 16899.0], [978.0, 14951.0], [984.0, 14456.0], [966.0, 16851.5], [965.0, 15947.0], [963.0, 16902.333333333332], [962.0, 16018.0], [961.0, 16951.0], [960.0, 17102.0], [983.0, 14579.0], [982.0, 14695.75], [981.0, 14772.5], [977.0, 14877.0], [976.0, 15071.0], [975.0, 14214.0], [974.0, 15868.0], [973.0, 15537.0], [972.0, 16194.0], [971.0, 16858.0], [970.0, 16245.0], [969.0, 15602.0], [968.0, 16849.0], [1000.0, 12630.0], [999.0, 11357.0], [998.0, 12932.0], [997.0, 13056.0], [996.0, 13121.0], [995.0, 13148.0], [994.0, 14038.545454545454], [1.0, 21151.0]], "isOverall": false, "label": "https://www.baidu.com/", "isController": false}, {"data": [[779.4929999999999, 18768.699999999997]], "isOverall": false, "label": "https://www.baidu.com/-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15.333333333333334, "minX": 1.65373014E12, "maxY": 42308.8, "series": [{"data": [[1.65373014E12, 341.2], [1.6537302E12, 42308.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65373014E12, 15.333333333333334], [1.6537302E12, 1901.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6537302E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 12790.5, "minX": 1.65373014E12, "maxY": 18816.911290322583, "series": [{"data": [[1.65373014E12, 12790.5], [1.6537302E12, 18816.911290322583]], "isOverall": false, "label": "https://www.baidu.com/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6537302E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 12789.124999999998, "minX": 1.65373014E12, "maxY": 18772.447580645137, "series": [{"data": [[1.65373014E12, 12789.124999999998], [1.6537302E12, 18772.447580645137]], "isOverall": false, "label": "https://www.baidu.com/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6537302E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 12743.375, "minX": 1.65373014E12, "maxY": 17620.985887096776, "series": [{"data": [[1.65373014E12, 12743.375], [1.6537302E12, 17620.985887096776]], "isOverall": false, "label": "https://www.baidu.com/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6537302E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 11357.0, "minX": 1.65373014E12, "maxY": 21257.0, "series": [{"data": [[1.65373014E12, 13303.0], [1.6537302E12, 21257.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65373014E12, 13303.0], [1.6537302E12, 20874.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65373014E12, 13303.0], [1.6537302E12, 21196.28]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65373014E12, 13303.0], [1.6537302E12, 21092.35]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65373014E12, 11357.0], [1.6537302E12, 12953.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65373014E12, 12993.0], [1.6537302E12, 18811.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6537302E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13758.5, "minX": 4.0, "maxY": 20996.0, "series": [{"data": [[4.0, 13758.5], [132.0, 17423.5], [285.0, 18377.0], [165.0, 20996.0], [21.0, 14379.0], [254.0, 19195.0], [127.0, 20141.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 285.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13159.5, "minX": 4.0, "maxY": 20996.0, "series": [{"data": [[4.0, 13159.5], [132.0, 17333.5], [285.0, 18361.0], [165.0, 20996.0], [21.0, 14378.0], [254.0, 19180.5], [127.0, 20047.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 285.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.65373014E12, "maxY": 16.666666666666668, "series": [{"data": [[1.65373014E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65373014E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.65373014E12, "maxY": 16.533333333333335, "series": [{"data": [[1.65373014E12, 0.13333333333333333], [1.6537302E12, 16.533333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6537302E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.65373014E12, "maxY": 16.533333333333335, "series": [{"data": [[1.65373014E12, 0.13333333333333333], [1.6537302E12, 16.533333333333335]], "isOverall": false, "label": "https://www.baidu.com/-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6537302E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.65373014E12, "maxY": 16.533333333333335, "series": [{"data": [[1.65373014E12, 0.13333333333333333], [1.6537302E12, 16.533333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6537302E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

